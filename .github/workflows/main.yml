name: Deploy
on:
  push:
    branches:
      - main
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: eu-west-1
jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      web_public_dns: ${{ steps.store.outputs.web_public_dns }}
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: eu-west-1
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.3

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var="my_ip=${{secrets.MY_IP}}" -var="db_username=${{secrets.DB_USERNAME}}" -var="db_password=${{secrets.DB_PASSWORD}}" -var="public_key=${{secrets.PUBLIC_KEY}}"
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var="my_ip=${{secrets.MY_IP}}" -var="db_username=${{secrets.DB_USERNAME}}" -var="db_password=${{secrets.DB_PASSWORD}}" -var="public_key=${{secrets.PUBLIC_KEY}}"

      - name: Store public DNS
        id: store
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
        run: |
          web_public_dns="$(terraform output -raw web_public_dns)"
          echo "Web Public DNS: $web_public_dns"
          echo -n "web_public_dns=$web_public_dns" >> "$GITHUB_OUTPUT"

  spring-build:
    needs: terraform
    runs-on: ubuntu-latest
    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    defaults:
      run:
        shell: bash
        working-directory: ./server
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      #Set up java
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build Spring application
        run: mvn package

  spring-deploy:
    needs: [ terraform, spring-build ]
    if: needs.terraform.outputs.web_public_dns != ''
    runs-on: ubuntu-latest
    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    defaults:
      run:
        shell: bash
        working-directory: ./server
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      #Set up java
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build Spring application
        run: mvn package

      # Deploy to EC2 instance
      - name: Deploy to EC2 (SCP)
        run: |
          scp -o StrictHostKeyChecking=no -i "${{ secrets.PRIVATE_KEY }}" "target/server.jar" ubuntu@${{ needs.terraform.outputs.web_public_dns }}:jbe/
          ssh -o StrictHostKeyChecking=no -i "${{ secrets.PRIVATE_KEY }}" ubuntu@${{ needs.terraform.outputs.web_public_dns }}
          sudo kill -9 `sudo lsof -t -i:80` & sudo java -jar /jbe/server.jar &
